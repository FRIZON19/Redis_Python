import redis
import json
import time

# Conectar com o REDIS
r = redis.Redis(host="127.0.0.1", port=6379, db=1, password="")
# criar dicionário vázio
veiculo = {}
# se o stream veiculo_consolidado estiver vazio
if r.xlen("veiculo_consolidado") == 0:
    # pega a primeira e a última entrada do stream 
    first_id = r.xinfo_stream("veiculo")['first-entry'][0]
    last_id = r.xinfo_stream("veiculo")['last-entry'][0]    
else:
    # senão estiver vazio pega a última entrada no stream veiculo_consolidado
    # atribui ao first_id o id da última entrada  do veículo consolidado e
    # a última entrada do stream veiculo
    veiculo = r.xinfo_stream("veiculo_consolidado")['last-entry'][1]
    first_id = veiculo[b"id"]
    last_id = r.xinfo_stream("veiculo")['last-entry'][0]    

# converte o first_id em um inteiro
first = int(first_id.decode("utf-8").split("-")[0])

count = 0
loops = 0
next_id = first


while(True):
    # armazena o stream veiculo na variável dados
    dados = r.xrange("veiculo", min=next_id, count=2)
    # verifica se o stream está vazio
    if len(dados) == 0:
        break
    # lê a quantidade de registros no stream
    count += len(dados)
    # atribui à variável next_id o primeiro id do stream 
    # veiculo armazenado na variável dados, retira caraceter 
    # especial '-'
    next_id = dados[-1][0].decode("utf-8")
    next_id = next_id.split("-")[0]
    next_id = next_id + "-1"

    # incrementa a variável loop
    loops += 1
    # executa o loop for na variável dados
    for item in dados:
        # armazena o valor do ano do veículo na variável ano, após tratamento
        ano = item[1][b'veiculo_ano'].decode("utf-8")
        # verifica se o ano está adicionado no dicionário, caso esteja, 
        # incrementa o valor em 1, se não estiver, adiciona o ano e o valor 1
        if ano in veiculo:
            veiculo[ano] += 1
        else:
            veiculo[ano] = 1

# atualiza o valor do id do dicionário veiculo com o último id do stream de dados
veiculo["id"] = next_id
# verifica se o dicionário veiculo possui registro, se existir, cria o stream 
# veiculo_consolidado com o dicionário veiculo
if any(veiculo):
    r.xadd("veiculo_consolidado", veiculo)
# imprime o dicionário veiculo
print("Total do %s:" %(veiculo))
import redis

#r = redis.Redis(host='redis-17852.c15.us-east-1-2.ec2.cloud.redislabs.com', port=17852, db=0, password='senha_redis_lab')
#r = redis.Redis(host='url', port=0, db=0, password='pass')
r = redis.Redis(host="127.0.0.1", port=6379, db=1, password="")

while(True):
   print(r.xread({'veiculo': "$"}, count=1, block=50000))
from pickletools import read_string1
from faker import Faker 
from faker_vehicle import VehicleProvider
import time
import random
import redis
import json

fake = Faker()
fake.add_provider(VehicleProvider)

r = redis.Redis(host="127.0.0.1", port=6379, db=1, password="")

while(True):
  output = {
    "id": fake.numerify(text="id-%#%#"),
    "nome": fake.name(),
    "telefone": fake.numerify(text="(%%) 9%%%%-%%%%"),
    "email": fake.ascii_safe_email(),
    "endereco": fake.address(),
    "veiculo_placa": fake.license_plate(),
    "veiculo_ano": fake.vehicle_year(),
    "veiculo_fabricante": fake.vehicle_make(),
    "veiculo_modelo": fake.vehicle_model()
  }
  print(output)
  print(r.xadd("veiculo", output))
  time.sleep(random.randint(1, 10))
# DOCUMENTACAO BD REDIS 
## Passo 1 — Instalando e Configurando o Redis

>>sudo apt update

>>sudo apt install redis-server

Isso irá baixar e instalar o Redis e suas dependências. Em seguida, há uma alteração importante na configuração a ser feita no arquivo de configuração do Redis, que foi gerada automaticamente durante a instalação.

>>sudo nano /etc/redis/redis.conf

>>sudo systemctl restart redis.service

Com isso, você instalou e configurou o Redis e ele está funcionando na sua máquina. No entanto, antes de você começar a usá-lo, é prudente verificar primeiro se o Redis está funcionando corretamente.

## Passo 2 — Testando o Redis
>>sudo systemctl status redis

### Para testar se o Redis está funcionando corretamente, conecte-se ao servidor usando o cliente da linha de comando:

>>redis-cli

No prompt que segue, teste a conectividade com o comando ping:

>>ping

Este resultado confirma que a conexão com o servidor ainda está viva. A seguir, verifique se você é capaz de definir chaves executando:

>>set test "It's working!"

## Imagen Docker:
>>docker run -p 6379:6379 --name redis-mod redislabs/redismod

>>docker exec -it redis-mod redis-cli 

    Teste de conexao

-----------------------------------------------
### Documentacao.
https://redis.io/docs/

https://redis.io/

https://try.redis.io/
